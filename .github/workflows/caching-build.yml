name: caching-build
on:
  # only runs on main, hourly cache update used by all branches
    schedule:
      - cron: "0 * * * *"
    push:

jobs:
  build-kernel:
    runs-on: ubuntu-24.04
    steps:
      # redundancy to exit fast
      - run: echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
      - run: sudo apt update
      - run: sudo apt install -y git --no-install-recommends
      # get latest head commit of sched_ext for-next
      - run: echo "SCHED_EXT_KERNEL_COMMIT=$(git ls-remote https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git heads/for-next | awk '{print $1}')" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      # use cached kernel if available, create after job if not
      - name: Cache Kernel
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: |
            linux
          key: kernel-build-${{ env.SCHED_EXT_KERNEL_COMMIT }}

      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/install-deps-action

      # cache virtiofsd (goes away w/ 24.04)
      - name: Cache virtiofsd
        id: cache-virtiofsd
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/virtiofsd
          key: virtiofsd-binary
      - if: ${{ steps.cache-virtiofsd.outputs.cache-hit != 'true' && steps.cache-kernel.outputs.cache-hit != 'true' }}
        run: cargo install virtiofsd && sudo cp -a ~/.cargo/bin/virtiofsd /usr/lib/

      # cache bzImage alone for rust tests (disk space limit workaround)
      - name: Cache bzImage
        id: cache-bzImage
        uses: actions/cache@v4
        with:
          path: |
            linux/arch/x86/boot/bzImage
          key: kernel-bzImage-${{ env.SCHED_EXT_KERNEL_COMMIT }}

      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        name: Clone Kernel
        # Get the latest sched-ext enabled kernel directly from the korg
        # for-next branch
        run: git clone --single-branch -b for-next --depth 1 https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git linux

      # guard rail because we are caching
      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        run: cd linux && git checkout ${{ env.SCHED_EXT_KERNEL_COMMIT }}

      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
      # Print the latest commit of the checked out sched-ext kernel
        run: cd linux && git log -1 --pretty=format:"%h %ad %s" --date=short

      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
      # Build a minimal kernel (with sched-ext enabled) using virtme-ng
        run: cd linux && vng -v --build --config ../.github/workflows/sched-ext.config

      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
      # Generate kernel headers
        run: cd linux && make headers

  integration-test:
    runs-on: ubuntu-24.04
    needs: build-kernel
    strategy:
          matrix:
            scheduler: [ scx_bpfland, scx_lavd, scx_layered, scx_rlfifo, scx_rustland, scx_rusty ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-deps-action
      # cache virtiofsd (goes away w/ 24.04)
      - name: Cache virtiofsd
        id: cache-virtiofsd
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/virtiofsd
          key: virtiofsd-binary
      - if: ${{ steps.cache-virtiofsd.outputs.cache-hit != 'true' }}          
        run: cargo install virtiofsd && sudo cp -a ~/.cargo/bin/virtiofsd /usr/lib/

      # get latest head commit of sched_ext for-next
      - run: echo "SCHED_EXT_KERNEL_COMMIT=$(git ls-remote https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git heads/for-next | awk '{print $1}')" >> $GITHUB_ENV

      # use cached kernel if available, create after job if not
      - name: Cache Kernel
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: |
            linux
          key: kernel-build-${{ env.SCHED_EXT_KERNEL_COMMIT }}

      # need to re-run job when kernel head changes between build and test running.
      - if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        name: exit if cache stale
        run: exit -1

      # veristat
      - run: wget https://github.com/libbpf/veristat/releases/download/v0.3.2/veristat-v0.3.2-amd64.tar.gz
      - run: tar -xvf veristat-v0.3.2-amd64.tar.gz && sudo cp veristat /usr/bin/
      - run: sudo chmod +x /usr/bin/veristat && sudo chmod 755 /usr/bin/veristat

      # The actual build:
      - run: meson setup build -Dkernel=$(pwd)/linux -Dkernel_headers=./linux/usr/include -Denable_stress=true
      - run: meson compile -C build ${{ matrix.scheduler }}

      # Print CPU model before running the tests (this can be useful for
      # debugging purposes)
      - run: grep 'model name' /proc/cpuinfo | head -1

      # Test schedulers
      - run: meson compile -C build test_sched_${{ matrix.scheduler }}
      # Stress schedulers
      - uses: cytopia/shell-command-retry-action@v0.1.2
        name: stress test
        with:
          retries: 3
          command: meson compile -C build stress_tests_${{ matrix.scheduler }}
      - run: meson compile -C build veristat_${{ matrix.scheduler }}

  rust-test-core:
    runs-on: ubuntu-24.04
    needs: build-kernel
    strategy:
      matrix:
        component: [scx_loader, scx_rustland_core, scx_stats, scx_utils]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-deps-action
      # cache virtiofsd (goes away w/ 24.04)
      - name: Cache virtiofsd
        id: cache-virtiofsd
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/virtiofsd
          key: virtiofsd-binary
      - if: ${{ steps.cache-virtiofsd.outputs.cache-hit != 'true' }}          
        run: cargo install virtiofsd && sudo cp -a ~/.cargo/bin/virtiofsd /usr/lib/

      # get latest head commit of sched_ext for-next
      - run: echo "SCHED_EXT_KERNEL_COMMIT=$(git ls-remote https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git heads/for-next | awk '{print $1}')" >> $GITHUB_ENV
      # cache bzImage alone for rust tests
      - name: Cache bzImage
        id: cache-bzImage
        uses: actions/cache@v4
        with:
          path: |
            linux/arch/x86/boot/bzImage
          key: kernel-bzImage-${{ env.SCHED_EXT_KERNEL_COMMIT }}

      # need to re-run job when kernel head changes between build and test running.
      - if: ${{ steps.cache-bzImage.outputs.cache-hit != 'true' }}
        name: exit if cache stale
        run: exit -1

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
          key: ${{ matrix.component }}
          prefix-key: "1"
      - run: cargo build  --manifest-path rust/${{ matrix.component }}/Cargo.toml
      - run: cargo test --manifest-path rust/${{ matrix.component }}/Cargo.toml --no-run
      - run: vng -v --memory 10G --cpu 8 -r linux/arch/x86/boot/bzImage  --net user -- cargo test --manifest-path rust/${{ matrix.component }}/Cargo.toml

  rust-test-schedulers:
    runs-on: ubuntu-24.04
    needs: build-kernel
    strategy:
      matrix:
        scheduler: [ scx_bpfland, scx_lavd, scx_layered, scx_rlfifo, scx_rustland, scx_rusty ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install-deps-action
      # cache virtiofsd (goes away w/ 24.04)
      - name: Cache virtiofsd
        id: cache-virtiofsd
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/virtiofsd
          key: virtiofsd-binary
      - if: ${{ steps.cache-virtiofsd.outputs.cache-hit != 'true' }}          
        run: cargo install virtiofsd && sudo cp -a ~/.cargo/bin/virtiofsd /usr/lib/

      # get latest head commit of sched_ext for-next
      - run: echo "SCHED_EXT_KERNEL_COMMIT=$(git ls-remote https://git.kernel.org/pub/scm/linux/kernel/git/tj/sched_ext.git heads/for-next | awk '{print $1}')" >> $GITHUB_ENV
      # cache bzImage alone for rust tests
      - name: Cache bzImage
        id: cache-bzImage
        uses: actions/cache@v4
        with:
          path: |
            linux/arch/x86/boot/bzImage
          key: kernel-bzImage-${{ env.SCHED_EXT_KERNEL_COMMIT }}

      # need to re-run job when kernel head changes between build and test running.
      - if: ${{ steps.cache-bzImage.outputs.cache-hit != 'true' }}
        name: exit if cache stale
        run: exit -1

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: scheds/rust
          key: ${{ matrix.scheduler }}
          prefix-key: "1"
      - run: cargo build  --manifest-path scheds/rust/${{ matrix.scheduler }}/Cargo.toml
      - run: cargo test --manifest-path scheds/rust/${{ matrix.scheduler }}/Cargo.toml --no-run
      - run: vng -v --memory 10G --cpu 8 -r linux/arch/x86/boot/bzImage  --net user -- cargo test --manifest-path scheds/rust/${{ matrix.scheduler }}/Cargo.toml
