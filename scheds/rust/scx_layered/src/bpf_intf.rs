/* automatically generated by rust-bindgen 0.70.1 */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const __GENTOO_NOT_FREESTANDING: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type s32 = ::std::os::raw::c_int;
pub type s64 = ::std::os::raw::c_longlong;
pub type u32_ = ::std::os::raw::c_uint;
pub type u64_ = ::std::os::raw::c_ulonglong;
pub const ravg_consts_RAVG_VAL_BITS: ravg_consts = 44;
pub const ravg_consts_RAVG_FRAC_BITS: ravg_consts = 20;
pub type ravg_consts = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ravg_data {
    pub val: u64_,
    pub val_at: u64_,
    pub old: u64_,
    pub cur: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ravg_data"][::std::mem::size_of::<ravg_data>() - 32usize];
    ["Alignment of ravg_data"][::std::mem::align_of::<ravg_data>() - 8usize];
    ["Offset of field: ravg_data::val"][::std::mem::offset_of!(ravg_data, val) - 0usize];
    ["Offset of field: ravg_data::val_at"][::std::mem::offset_of!(ravg_data, val_at) - 8usize];
    ["Offset of field: ravg_data::old"][::std::mem::offset_of!(ravg_data, old) - 16usize];
    ["Offset of field: ravg_data::cur"][::std::mem::offset_of!(ravg_data, cur) - 24usize];
};
pub const consts_MAX_CPUS_SHIFT: consts = 9;
pub const consts_MAX_CPUS: consts = 512;
pub const consts_MAX_CPUS_U8: consts = 64;
pub const consts_MAX_TASKS: consts = 131072;
pub const consts_MAX_PATH: consts = 4096;
pub const consts_MAX_NUMA_NODES: consts = 64;
pub const consts_MAX_LLCS: consts = 64;
pub const consts_MAX_COMM: consts = 16;
pub const consts_MAX_LAYER_MATCH_ORS: consts = 32;
pub const consts_MAX_LAYER_NAME: consts = 64;
pub const consts_MAX_LAYERS: consts = 16;
pub const consts_MAX_LAYER_WEIGHT: consts = 10000;
pub const consts_MIN_LAYER_WEIGHT: consts = 1;
pub const consts_DEFAULT_LAYER_WEIGHT: consts = 100;
pub const consts_USAGE_HALF_LIFE: consts = 100000000;
pub const consts_HI_FALLBACK_DSQ_BASE: consts = 1024;
pub const consts_LO_FALLBACK_DSQ: consts = 1089;
pub const consts_MAX_CGRP_PREFIXES: consts = 32;
pub const consts_NSEC_PER_USEC: consts = 1000;
pub const consts_NSEC_PER_MSEC: consts = 1000000;
pub const consts_MSEC_PER_SEC: consts = 1000;
pub const consts_NSEC_PER_SEC: consts = 1000000000;
pub type consts = ::std::os::raw::c_uint;
pub const layer_kind_LAYER_KIND_OPEN: layer_kind = 0;
pub const layer_kind_LAYER_KIND_GROUPED: layer_kind = 1;
pub const layer_kind_LAYER_KIND_CONFINED: layer_kind = 2;
pub type layer_kind = ::std::os::raw::c_uint;
pub const global_stat_idx_GSTAT_EXCL_IDLE: global_stat_idx = 0;
pub const global_stat_idx_GSTAT_EXCL_WAKEUP: global_stat_idx = 1;
pub const global_stat_idx_NR_GSTATS: global_stat_idx = 2;
pub type global_stat_idx = ::std::os::raw::c_uint;
pub const layer_stat_idx_LSTAT_SEL_LOCAL: layer_stat_idx = 0;
pub const layer_stat_idx_LSTAT_ENQ_WAKEUP: layer_stat_idx = 1;
pub const layer_stat_idx_LSTAT_ENQ_EXPIRE: layer_stat_idx = 2;
pub const layer_stat_idx_LSTAT_ENQ_REENQ: layer_stat_idx = 3;
pub const layer_stat_idx_LSTAT_MIN_EXEC: layer_stat_idx = 4;
pub const layer_stat_idx_LSTAT_MIN_EXEC_NS: layer_stat_idx = 5;
pub const layer_stat_idx_LSTAT_OPEN_IDLE: layer_stat_idx = 6;
pub const layer_stat_idx_LSTAT_AFFN_VIOL: layer_stat_idx = 7;
pub const layer_stat_idx_LSTAT_KEEP: layer_stat_idx = 8;
pub const layer_stat_idx_LSTAT_KEEP_FAIL_MAX_EXEC: layer_stat_idx = 9;
pub const layer_stat_idx_LSTAT_KEEP_FAIL_BUSY: layer_stat_idx = 10;
pub const layer_stat_idx_LSTAT_PREEMPT: layer_stat_idx = 11;
pub const layer_stat_idx_LSTAT_PREEMPT_FIRST: layer_stat_idx = 12;
pub const layer_stat_idx_LSTAT_PREEMPT_XLLC: layer_stat_idx = 13;
pub const layer_stat_idx_LSTAT_PREEMPT_XNUMA: layer_stat_idx = 14;
pub const layer_stat_idx_LSTAT_PREEMPT_IDLE: layer_stat_idx = 15;
pub const layer_stat_idx_LSTAT_PREEMPT_FAIL: layer_stat_idx = 16;
pub const layer_stat_idx_LSTAT_EXCL_COLLISION: layer_stat_idx = 17;
pub const layer_stat_idx_LSTAT_EXCL_PREEMPT: layer_stat_idx = 18;
pub const layer_stat_idx_LSTAT_KICK: layer_stat_idx = 19;
pub const layer_stat_idx_LSTAT_YIELD: layer_stat_idx = 20;
pub const layer_stat_idx_LSTAT_YIELD_IGNORE: layer_stat_idx = 21;
pub const layer_stat_idx_LSTAT_MIGRATION: layer_stat_idx = 22;
pub const layer_stat_idx_LSTAT_XNUMA_MIGRATION: layer_stat_idx = 23;
pub const layer_stat_idx_LSTAT_XLLC_MIGRATION: layer_stat_idx = 24;
pub const layer_stat_idx_LSTAT_XLAYER_WAKE: layer_stat_idx = 25;
pub const layer_stat_idx_LSTAT_XLAYER_REWAKE: layer_stat_idx = 26;
pub const layer_stat_idx_NR_LSTATS: layer_stat_idx = 27;
pub type layer_stat_idx = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_ctx {
    pub current_preempt: bool,
    pub current_exclusive: bool,
    pub prev_exclusive: bool,
    pub maybe_idle: bool,
    pub yielding: bool,
    pub try_preempt_first: bool,
    pub is_big: bool,
    pub layer_cycles: [u64_; 16usize],
    pub gstats: [u64_; 2usize],
    pub lstats: [[u64_; 27usize]; 16usize],
    pub ran_current_for: u64_,
    pub layer_idx: u32_,
    pub cache_idx: u32_,
    pub node_idx: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_ctx"][::std::mem::size_of::<cpu_ctx>() - 3632usize];
    ["Alignment of cpu_ctx"][::std::mem::align_of::<cpu_ctx>() - 8usize];
    ["Offset of field: cpu_ctx::current_preempt"]
        [::std::mem::offset_of!(cpu_ctx, current_preempt) - 0usize];
    ["Offset of field: cpu_ctx::current_exclusive"]
        [::std::mem::offset_of!(cpu_ctx, current_exclusive) - 1usize];
    ["Offset of field: cpu_ctx::prev_exclusive"]
        [::std::mem::offset_of!(cpu_ctx, prev_exclusive) - 2usize];
    ["Offset of field: cpu_ctx::maybe_idle"][::std::mem::offset_of!(cpu_ctx, maybe_idle) - 3usize];
    ["Offset of field: cpu_ctx::yielding"][::std::mem::offset_of!(cpu_ctx, yielding) - 4usize];
    ["Offset of field: cpu_ctx::try_preempt_first"]
        [::std::mem::offset_of!(cpu_ctx, try_preempt_first) - 5usize];
    ["Offset of field: cpu_ctx::is_big"][::std::mem::offset_of!(cpu_ctx, is_big) - 6usize];
    ["Offset of field: cpu_ctx::layer_cycles"]
        [::std::mem::offset_of!(cpu_ctx, layer_cycles) - 8usize];
    ["Offset of field: cpu_ctx::gstats"][::std::mem::offset_of!(cpu_ctx, gstats) - 136usize];
    ["Offset of field: cpu_ctx::lstats"][::std::mem::offset_of!(cpu_ctx, lstats) - 152usize];
    ["Offset of field: cpu_ctx::ran_current_for"]
        [::std::mem::offset_of!(cpu_ctx, ran_current_for) - 3608usize];
    ["Offset of field: cpu_ctx::layer_idx"][::std::mem::offset_of!(cpu_ctx, layer_idx) - 3616usize];
    ["Offset of field: cpu_ctx::cache_idx"][::std::mem::offset_of!(cpu_ctx, cache_idx) - 3620usize];
    ["Offset of field: cpu_ctx::node_idx"][::std::mem::offset_of!(cpu_ctx, node_idx) - 3624usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_ctx {
    pub id: u32_,
    pub cpumask: *mut bpf_cpumask,
    pub nr_cpus: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cache_ctx"][::std::mem::size_of::<cache_ctx>() - 24usize];
    ["Alignment of cache_ctx"][::std::mem::align_of::<cache_ctx>() - 8usize];
    ["Offset of field: cache_ctx::id"][::std::mem::offset_of!(cache_ctx, id) - 0usize];
    ["Offset of field: cache_ctx::cpumask"][::std::mem::offset_of!(cache_ctx, cpumask) - 8usize];
    ["Offset of field: cache_ctx::nr_cpus"][::std::mem::offset_of!(cache_ctx, nr_cpus) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node_ctx {
    pub id: u32_,
    pub cpumask: *mut bpf_cpumask,
    pub nr_llcs: u32_,
    pub nr_cpus: u32_,
    pub llc_mask: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of node_ctx"][::std::mem::size_of::<node_ctx>() - 32usize];
    ["Alignment of node_ctx"][::std::mem::align_of::<node_ctx>() - 8usize];
    ["Offset of field: node_ctx::id"][::std::mem::offset_of!(node_ctx, id) - 0usize];
    ["Offset of field: node_ctx::cpumask"][::std::mem::offset_of!(node_ctx, cpumask) - 8usize];
    ["Offset of field: node_ctx::nr_llcs"][::std::mem::offset_of!(node_ctx, nr_llcs) - 16usize];
    ["Offset of field: node_ctx::nr_cpus"][::std::mem::offset_of!(node_ctx, nr_cpus) - 20usize];
    ["Offset of field: node_ctx::llc_mask"][::std::mem::offset_of!(node_ctx, llc_mask) - 24usize];
};
pub const layer_match_kind_MATCH_CGROUP_PREFIX: layer_match_kind = 0;
pub const layer_match_kind_MATCH_COMM_PREFIX: layer_match_kind = 1;
pub const layer_match_kind_MATCH_PCOMM_PREFIX: layer_match_kind = 2;
pub const layer_match_kind_MATCH_NICE_ABOVE: layer_match_kind = 3;
pub const layer_match_kind_MATCH_NICE_BELOW: layer_match_kind = 4;
pub const layer_match_kind_MATCH_NICE_EQUALS: layer_match_kind = 5;
pub const layer_match_kind_MATCH_USER_ID_EQUALS: layer_match_kind = 6;
pub const layer_match_kind_MATCH_GROUP_ID_EQUALS: layer_match_kind = 7;
pub const layer_match_kind_MATCH_PID_EQUALS: layer_match_kind = 8;
pub const layer_match_kind_MATCH_PPID_EQUALS: layer_match_kind = 9;
pub const layer_match_kind_MATCH_TGID_EQUALS: layer_match_kind = 10;
pub const layer_match_kind_NR_LAYER_MATCH_KINDS: layer_match_kind = 11;
pub type layer_match_kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer_match {
    pub kind: ::std::os::raw::c_int,
    pub cgroup_prefix: [::std::os::raw::c_char; 4096usize],
    pub comm_prefix: [::std::os::raw::c_char; 16usize],
    pub pcomm_prefix: [::std::os::raw::c_char; 16usize],
    pub nice: ::std::os::raw::c_int,
    pub user_id: u32_,
    pub group_id: u32_,
    pub pid: u32_,
    pub ppid: u32_,
    pub tgid: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of layer_match"][::std::mem::size_of::<layer_match>() - 4156usize];
    ["Alignment of layer_match"][::std::mem::align_of::<layer_match>() - 4usize];
    ["Offset of field: layer_match::kind"][::std::mem::offset_of!(layer_match, kind) - 0usize];
    ["Offset of field: layer_match::cgroup_prefix"]
        [::std::mem::offset_of!(layer_match, cgroup_prefix) - 4usize];
    ["Offset of field: layer_match::comm_prefix"]
        [::std::mem::offset_of!(layer_match, comm_prefix) - 4100usize];
    ["Offset of field: layer_match::pcomm_prefix"]
        [::std::mem::offset_of!(layer_match, pcomm_prefix) - 4116usize];
    ["Offset of field: layer_match::nice"][::std::mem::offset_of!(layer_match, nice) - 4132usize];
    ["Offset of field: layer_match::user_id"]
        [::std::mem::offset_of!(layer_match, user_id) - 4136usize];
    ["Offset of field: layer_match::group_id"]
        [::std::mem::offset_of!(layer_match, group_id) - 4140usize];
    ["Offset of field: layer_match::pid"][::std::mem::offset_of!(layer_match, pid) - 4144usize];
    ["Offset of field: layer_match::ppid"][::std::mem::offset_of!(layer_match, ppid) - 4148usize];
    ["Offset of field: layer_match::tgid"][::std::mem::offset_of!(layer_match, tgid) - 4152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer_match_ands {
    pub matches: [layer_match; 11usize],
    pub nr_match_ands: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of layer_match_ands"][::std::mem::size_of::<layer_match_ands>() - 45720usize];
    ["Alignment of layer_match_ands"][::std::mem::align_of::<layer_match_ands>() - 4usize];
    ["Offset of field: layer_match_ands::matches"]
        [::std::mem::offset_of!(layer_match_ands, matches) - 0usize];
    ["Offset of field: layer_match_ands::nr_match_ands"]
        [::std::mem::offset_of!(layer_match_ands, nr_match_ands) - 45716usize];
};
pub const layer_growth_algo_GROWTH_ALGO_STICKY: layer_growth_algo = 0;
pub const layer_growth_algo_GROWTH_ALGO_LINEAR: layer_growth_algo = 1;
pub const layer_growth_algo_GROWTH_ALGO_REVERSE: layer_growth_algo = 2;
pub const layer_growth_algo_GROWTH_ALGO_RANDOM: layer_growth_algo = 3;
pub const layer_growth_algo_GROWTH_ALGO_TOPO: layer_growth_algo = 4;
pub const layer_growth_algo_GROWTH_ALGO_ROUND_ROBIN: layer_growth_algo = 5;
pub const layer_growth_algo_GROWTH_ALGO_BIG_LITTLE: layer_growth_algo = 6;
pub const layer_growth_algo_GROWTH_ALGO_LITTLE_BIG: layer_growth_algo = 7;
pub const layer_growth_algo_GROWTH_ALGO_RANDOM_TOPO: layer_growth_algo = 8;
pub type layer_growth_algo = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layer {
    pub matches: [layer_match_ands; 32usize],
    pub nr_match_ors: ::std::os::raw::c_uint,
    pub idx: ::std::os::raw::c_uint,
    pub min_exec_ns: u64_,
    pub max_exec_ns: u64_,
    pub yield_step_ns: u64_,
    pub slice_ns: u64_,
    pub weight: u32_,
    pub kind: ::std::os::raw::c_int,
    pub preempt: bool,
    pub preempt_first: bool,
    pub exclusive: bool,
    pub idle_smt: bool,
    pub growth_algo: ::std::os::raw::c_int,
    pub vtime_now: u64_,
    pub nr_tasks: u64_,
    pub load: u64_,
    pub load_rd: ravg_data,
    pub cpus_seq: u64_,
    pub node_mask: u64_,
    pub cache_mask: u64_,
    pub refresh_cpus: ::std::os::raw::c_uint,
    pub cpus: [::std::os::raw::c_uchar; 64usize],
    pub nr_cpus: ::std::os::raw::c_uint,
    pub perf: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of layer"][::std::mem::size_of::<layer>() - 1463320usize];
    ["Alignment of layer"][::std::mem::align_of::<layer>() - 8usize];
    ["Offset of field: layer::matches"][::std::mem::offset_of!(layer, matches) - 0usize];
    ["Offset of field: layer::nr_match_ors"]
        [::std::mem::offset_of!(layer, nr_match_ors) - 1463040usize];
    ["Offset of field: layer::idx"][::std::mem::offset_of!(layer, idx) - 1463044usize];
    ["Offset of field: layer::min_exec_ns"]
        [::std::mem::offset_of!(layer, min_exec_ns) - 1463048usize];
    ["Offset of field: layer::max_exec_ns"]
        [::std::mem::offset_of!(layer, max_exec_ns) - 1463056usize];
    ["Offset of field: layer::yield_step_ns"]
        [::std::mem::offset_of!(layer, yield_step_ns) - 1463064usize];
    ["Offset of field: layer::slice_ns"][::std::mem::offset_of!(layer, slice_ns) - 1463072usize];
    ["Offset of field: layer::weight"][::std::mem::offset_of!(layer, weight) - 1463080usize];
    ["Offset of field: layer::kind"][::std::mem::offset_of!(layer, kind) - 1463084usize];
    ["Offset of field: layer::preempt"][::std::mem::offset_of!(layer, preempt) - 1463088usize];
    ["Offset of field: layer::preempt_first"]
        [::std::mem::offset_of!(layer, preempt_first) - 1463089usize];
    ["Offset of field: layer::exclusive"][::std::mem::offset_of!(layer, exclusive) - 1463090usize];
    ["Offset of field: layer::idle_smt"][::std::mem::offset_of!(layer, idle_smt) - 1463091usize];
    ["Offset of field: layer::growth_algo"]
        [::std::mem::offset_of!(layer, growth_algo) - 1463092usize];
    ["Offset of field: layer::vtime_now"][::std::mem::offset_of!(layer, vtime_now) - 1463096usize];
    ["Offset of field: layer::nr_tasks"][::std::mem::offset_of!(layer, nr_tasks) - 1463104usize];
    ["Offset of field: layer::load"][::std::mem::offset_of!(layer, load) - 1463112usize];
    ["Offset of field: layer::load_rd"][::std::mem::offset_of!(layer, load_rd) - 1463120usize];
    ["Offset of field: layer::cpus_seq"][::std::mem::offset_of!(layer, cpus_seq) - 1463152usize];
    ["Offset of field: layer::node_mask"][::std::mem::offset_of!(layer, node_mask) - 1463160usize];
    ["Offset of field: layer::cache_mask"]
        [::std::mem::offset_of!(layer, cache_mask) - 1463168usize];
    ["Offset of field: layer::refresh_cpus"]
        [::std::mem::offset_of!(layer, refresh_cpus) - 1463176usize];
    ["Offset of field: layer::cpus"][::std::mem::offset_of!(layer, cpus) - 1463180usize];
    ["Offset of field: layer::nr_cpus"][::std::mem::offset_of!(layer, nr_cpus) - 1463244usize];
    ["Offset of field: layer::perf"][::std::mem::offset_of!(layer, perf) - 1463248usize];
    ["Offset of field: layer::name"][::std::mem::offset_of!(layer, name) - 1463252usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_cpumask {
    pub _address: u8,
}
